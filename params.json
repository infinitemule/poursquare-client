{"name":"Poursquare - Client","tagline":"Storm/Finagle Hackathon Submission","body":"Storm/Finagle Hackathon Submission - Poursquare \r\n===============================================\r\n\r\nThis was my submission to the Storm/Finagle Hackathon which took place at hack/reduce \r\nin July of 2013.  \r\n\r\nThis repo contains the code for the client portion of the application.  This includes the \r\nweb application that connects to a MongoDB database and a Spring MVC application that displays some \r\nstatistics and real time checkin map.\r\n\r\nGetting Started\r\n---------------\r\n\r\n### Prerequisites\r\n\r\nInstall the [Java SDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) \r\nand [Maven](http://maven.apache.org/download.cgi).\r\n\r\nInstall an application server.  I used [Tomcat](http://tomcat.apache.org/) but Jetty or Glassfish or\r\nany servlet container will work just fine.\r\n\r\nAlthough I am using Scala, the libraries get bundled into the WAR file, you can deploy it \r\njust as you would any other WAR file.\r\n\r\n\r\n### Installing\r\n\r\nFirst, clone the repo onto your local machine.\r\n\r\nNext, if you are using Eclipse, you can set up a Dynamic Web Project and have Eclipse automatically publish \r\nto the server.  If you are using the command line, or just prefer to build a WAR and then deploy it yourself, \r\nyou can call `mvn package` and copy the WAR out of the `target` directory\r\n\r\n\r\n### Running\r\n\r\nStart your app server.  You'll also want to run the Storm topology so that it can populate Mongo.  \r\nThen you can point your browser here to see the most recent checkins:\r\n\r\n    http://localhost:8080/poursquare/latest\r\n    \r\nAlso check out checkins by countries:\r\n\r\n    http://localhost:8080/poursquare/countries\r\n    \r\nAnd of course, the real time map:\r\n\r\n    http://localhost:8080/poursquare/map           \r\n\r\nNotes\r\n-----\r\n\r\n* Implementing Spring MVC in Scala ain't pretty, but it works.  It was the fastest way for me to write \r\na small web app.  [Scalatra](http://www.scalatra.org) might be have been a better fit here.\r\n* I used the Java MongoDB driver and JSON queries.  Again, not pretty but it's simple and works just fine.  There is a Scala driver called [Casbah](http://api.mongodb.org/scala/casbah/2.0) that may have been a better fit.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}